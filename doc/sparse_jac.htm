<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=default'
>
</script>
<head>
<title>Computing Sparse Jacobians</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="Computing Sparse Jacobians">
<meta name="keywords" id="keywords" content=" computing sparse jacobians syntax module_ref purpose sparse_jac_for sparse_jac_rev af subset x pattern work n_sweep uses forward example ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_sparse_jac_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="https://github.com/bradbell/cppad_swig" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td><a href="sparse_hes_pattern_xam.py.htm" target="_top">Prev</a>
</td><td><a href="sparse_jac_xam.cpp.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>cppad_swig</option>
<option>library</option>
<option>sparse</option>
<option>sparse_jac</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>cppad_swig-&gt;</option>
<option>testing</option>
<option>swig_xam.i</option>
<option>library</option>
<option>whats_new_2018</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>library-&gt;</option>
<option>module</option>
<option>a_double</option>
<option>vector</option>
<option>a_fun</option>
<option>sparse</option>
<option>error</option>
<option>xam.m4</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>sparse-&gt;</option>
<option>sparse_rc</option>
<option>sparse_rcv</option>
<option>jac_sparsity</option>
<option>hes_sparsity</option>
<option>sparse_jac</option>
<option>sparse_hes</option>
</select>
</td>
<td>
<select onchange='choose_down0(this)'>
<option>sparse_jac-&gt;</option>
<option>sparse_jac_xam.cpp</option>
<option>sparse_jac_xam.m</option>
<option>sparse_jac_xam.pm</option>
<option>sparse_jac_xam.py</option>
</select>
</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Syntax</option>
<option>module_ref</option>
<option>Purpose</option>
<option>sparse_jac_for</option>
<option>sparse_jac_rev</option>
<option>af</option>
<option>subset</option>
<option>x</option>
<option>pattern</option>
<option>work</option>
<option>n_sweep</option>
<option>Uses Forward</option>
<option>Example</option>
</select>
</td>
</tr></table><br>
@(@\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\R}[1]{ {\rm #1} }@)@


<center><b><big><big>Computing Sparse Jacobians</big></big></b></center>
<br>
<b><big><a name="Syntax" id="Syntax">Syntax</a></big></b>

<br>

<code><i><font color="black"><span style='white-space: nowrap'>work</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>module_ref</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;sparse_jac_work()<br>
</span></font></code>

<code><i><font color="black"><span style='white-space: nowrap'>n_sweep</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>af</span></font></i><font color="blue"><span style='white-space: nowrap'>.sparse_jac_for(</span></font><i><font color="black"><span style='white-space: nowrap'>subset</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>x</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>pattern</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>work</span></font></i><font color="blue"><span style='white-space: nowrap'>)<br>
</span></font></code>

<code><i><font color="black"><span style='white-space: nowrap'>n_sweep</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>af</span></font></i><font color="blue"><span style='white-space: nowrap'>.sparse_jac_rev(</span></font><i><font color="black"><span style='white-space: nowrap'>subset</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>x</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>pattern</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>work</span></font></i><font color="blue"><span style='white-space: nowrap'>)</span></font></code>


<br>
<br>
<b><big><a name="module_ref" id="module_ref">module_ref</a></big></b>
<br>
This is the <a href="module.htm#module_ref" target="_top"><span style='white-space: nowrap'>module&nbsp;reference</span></a>

for the particular language.

<br>
<br>
<b><big><a name="Purpose" id="Purpose">Purpose</a></big></b>
<br>
We use <small>@(@
F : \B{R}^n \rightarrow \B{R}^m
@)@</small> to denote the
function corresponding to 
<code><i><font color="black"><span style='white-space: nowrap'>af</span></font></i></code>
.
The syntax above takes advantage of sparsity when computing the Jacobian
<small>@[@

	J(x) = F^{(1)} (x)

@]@</small>
In the sparse case, this should be faster and take less memory than
<a href="a_fun_jacobian.htm" target="_top"><span style='white-space: nowrap'>a_fun_jacobian</span></a>
.
We use the notation <small>@(@
J_{i,j} (x)
@)@</small> to denote the partial of
<small>@(@
F_i (x)
@)@</small> with respect to <small>@(@
x_j
@)@</small>.

<br>
<br>
<b><big><a name="sparse_jac_for" id="sparse_jac_for">sparse_jac_for</a></big></b>
<br>
This function uses first order forward mode sweeps <a href="a_fun_forward.htm" target="_top"><span style='white-space: nowrap'>a_fun_forward</span></a>

to compute multiple columns of the Jacobian at the same time.

<br>
<br>
<b><big><a name="sparse_jac_rev" id="sparse_jac_rev">sparse_jac_rev</a></big></b>
<br>
This function uses first order reverse mode sweeps <a href="a_fun_reverse.htm" target="_top"><span style='white-space: nowrap'>a_fun_reverse</span></a>

to compute multiple rows of the Jacobian at the same time.

<br>
<br>
<b><big><a name="af" id="af">af</a></big></b>
<br>
This object has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ADFun&lt;</span></font><i><font color="black"><span style='white-space: nowrap'>Base</span></font></i><font color="blue"><span style='white-space: nowrap'>&gt;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>af</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
Note that the Taylor coefficients stored in 
<code><i><font color="black"><span style='white-space: nowrap'>af</span></font></i></code>
 are affected
by this operation; see
<a href="sparse_jac.htm#Uses Forward" target="_top"><span style='white-space: nowrap'>uses&nbsp;forward</span></a>
 below.

<br>
<br>
<b><big><a name="subset" id="subset">subset</a></big></b>
<br>
This argument has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sparse_rcv&amp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>subset</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
Its row size is 
<code><i><font color="black"><span style='white-space: nowrap'>subset</span></font></i><font color="blue"><span style='white-space: nowrap'>.nr()&nbsp;==&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>m</span></font></i></code>
,
and its column size is 
<code><i><font color="black"><span style='white-space: nowrap'>subset</span></font></i><font color="blue"><span style='white-space: nowrap'>.nc()&nbsp;==&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>n</span></font></i></code>
.
It specifies which elements of the Jacobian are computed.
The input value of its value vector

<code><i><font color="black"><span style='white-space: nowrap'>subset</span></font></i><font color="blue"><span style='white-space: nowrap'>.val()</span></font></code>
 does not matter.
Upon return it contains the value of the corresponding elements
of the Jacobian.
All of the row, column pairs in 
<code><i><font color="black"><span style='white-space: nowrap'>subset</span></font></i></code>
 must also appear in

<code><i><font color="black"><span style='white-space: nowrap'>pattern</span></font></i></code>
; i.e., they must be possibly non-zero.

<br>
<br>
<b><big><a name="x" id="x">x</a></big></b>
<br>
This argument has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;vec_double&amp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>x</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
and its size is 
<code><i><font color="black"><span style='white-space: nowrap'>n</span></font></i></code>
.
It specifies the point at which to evaluate the Jacobian <small>@(@
J(x)
@)@</small>.

<br>
<br>
<b><big><a name="pattern" id="pattern">pattern</a></big></b>
<br>
This argument has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;sparse_rc&amp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>pattern</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
Its row size is 
<code><i><font color="black"><span style='white-space: nowrap'>pattern</span></font></i><font color="blue"><span style='white-space: nowrap'>.nr()&nbsp;==&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>m</span></font></i></code>
,
and its column size is 
<code><i><font color="black"><span style='white-space: nowrap'>pattern</span></font></i><font color="blue"><span style='white-space: nowrap'>.nc()&nbsp;==&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>n</span></font></i></code>
.
It is a sparsity pattern for the Jacobian <small>@(@
J(x)
@)@</small>.
This argument is not used (and need not satisfy any conditions),
when <a href="sparse_jac.htm#work" target="_top"><span style='white-space: nowrap'>work</span></a>
 is non-empty.

<br>
<br>
<b><big><a name="work" id="work">work</a></big></b>
<br>
This argument has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sparse_jac_work&amp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>work</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
We refer to its initial value,
and its value after 
<code><i><font color="black"><span style='white-space: nowrap'>work</span></font></i><font color="blue"><span style='white-space: nowrap'>.clear()</span></font></code>
, as empty.
If it is empty, information is stored in 
<code><i><font color="black"><span style='white-space: nowrap'>work</span></font></i></code>
.
This can be used to reduce computation when
a future call is for the same object 
<code><i><font color="black"><span style='white-space: nowrap'>af</span></font></i></code>
,
the same member function <code><font color="blue">sparse_jac_for</font></code> or <code><font color="blue">sparse_jac_rev</font></code>,
and the same subset of the Jacobian.
If any of these values change, use 
<code><i><font color="black"><span style='white-space: nowrap'>work</span></font></i><font color="blue"><span style='white-space: nowrap'>.clear()</span></font></code>
 to
empty this structure.

<br>
<br>
<b><big><a name="n_sweep" id="n_sweep">n_sweep</a></big></b>
<br>
The return value 
<code><i><font color="black"><span style='white-space: nowrap'>n_sweep</span></font></i></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>n_sweep</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
If <code><font color="blue">sparse_jac_for</font></code> (<code><font color="blue">sparse_jac_rev</font></code>) is used,

<code><i><font color="black"><span style='white-space: nowrap'>n_sweep</span></font></i></code>
 is the number of first order forward (reverse) sweeps
used to compute the requested Jacobian values.
This is proportional to the total computational work,
not counting the zero order forward sweep,
or combining multiple columns (rows) into a single sweep.

<br>
<br>
<b><big><a name="Uses Forward" id="Uses Forward">Uses Forward</a></big></b>
<br>
After each call to <a href="a_fun_forward.htm" target="_top"><span style='white-space: nowrap'>a_fun_forward</span></a>
,
the object 
<code><i><font color="black"><span style='white-space: nowrap'>af</span></font></i></code>
 contains the corresponding Taylor coefficients
for all the variables in the operation sequence..
After a call to <code><font color="blue">sparse_jac_forward</font></code> or <code><font color="blue">sparse_jac_rev</font></code>,
the zero order coefficients correspond to

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>af</span></font></i><font color="blue"><span style='white-space: nowrap'>.forward(0,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>x</span></font></i><font color="blue"><span style='white-space: nowrap'>)<br>
</span></font></code>
All the other forward mode coefficients are unspecified.


<br>
<br>
<b><big><a name="Example" id="Example">Example</a></big></b>

<br>
<a href="sparse_jac_xam.cpp.htm" target="_top"><span style='white-space: nowrap'>C++</span></a>
,
<a href="sparse_jac_xam.m.htm" target="_top"><span style='white-space: nowrap'>Octave</span></a>
,
<a href="sparse_jac_xam.pm.htm" target="_top"><span style='white-space: nowrap'>Perl</span></a>
,
<a href="sparse_jac_xam.py.htm" target="_top"><span style='white-space: nowrap'>Python</span></a>
.


<hr>Input File: lib/sparse.cpp

</body>
</html>
