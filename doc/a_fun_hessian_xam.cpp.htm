<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=default'
>
</script>
<head>
<title>C++: Dense Hessian Using AD: Example and Test</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="C++: Dense Hessian Using AD: Example and Test">
<meta name="keywords" id="keywords" content=" c++: dense hessian using ad: example test ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_a_fun_hessian_xam.cpp_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="https://github.com/bradbell/cppad_swig" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td><a href="a_fun_hessian.htm" target="_top">Prev</a>
</td><td><a href="a_fun_hessian_xam.m.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>cppad_swig</option>
<option>library</option>
<option>a_fun</option>
<option>a_fun_hessian</option>
<option>a_fun_hessian_xam.cpp</option>
</select>
</td>
<td>
<select onchange='choose_down4(this)'>
<option>cppad_swig-&gt;</option>
<option>testing</option>
<option>swig_xam.i</option>
<option>library</option>
<option>whats_new_2018</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>library-&gt;</option>
<option>module</option>
<option>a_double</option>
<option>vector</option>
<option>a_fun</option>
<option>sparse</option>
<option>error</option>
<option>xam.m4</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>a_fun-&gt;</option>
<option>independent</option>
<option>abort_recording</option>
<option>a_fun_ctor</option>
<option>a_fun_jacobian</option>
<option>a_fun_hessian</option>
<option>a_fun_forward</option>
<option>a_fun_reverse</option>
<option>a_fun_optimize</option>
<option>a_fun_property</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>a_fun_hessian-&gt;</option>
<option>a_fun_hessian_xam.cpp</option>
<option>a_fun_hessian_xam.m</option>
<option>a_fun_hessian_xam.pm</option>
<option>a_fun_hessian_xam.py</option>
</select>
</td>
<td>a_fun_hessian_xam.cpp</td>
<td>Headings</td>
</tr></table><br>
@(@\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\R}[1]{ {\rm #1} }@)@<center><b><big><big>C++: Dense Hessian Using AD: Example and Test</big></big></b></center>
<pre><tt><b><font color="#000080"># include</font></b> <font color="#FF0000">&lt;cstdio&gt;</font>
<b><font color="#000080"># include</font></b> <font color="#FF0000">&lt;string&gt;</font>
<b><font color="#000080"># include</font></b> <font color="#FF0000">&lt;cppad/swig/cppad_swig.hpp&gt;</font>

<font color="#009900">bool</font> <b><font color="#000000">a_fun_hessian_xam</font></b><font color="#990000">(</font><font color="#009900">void</font><font color="#990000">)</font> <font color="#FF0000">{</font>
     <b><font color="#0000FF">using</font></b> cppad_swig<font color="#990000">::</font>a_double<font color="#990000">;</font>
     <b><font color="#0000FF">using</font></b> cppad_swig<font color="#990000">::</font>vec_bool<font color="#990000">;</font>
     <b><font color="#0000FF">using</font></b> cppad_swig<font color="#990000">::</font>vec_int<font color="#990000">;</font>
     <b><font color="#0000FF">using</font></b> cppad_swig<font color="#990000">::</font>vec_double<font color="#990000">;</font>
     <b><font color="#0000FF">using</font></b> cppad_swig<font color="#990000">::</font>vec_a_double<font color="#990000">;</font>
     <b><font color="#0000FF">using</font></b> cppad_swig<font color="#990000">::</font>a_fun<font color="#990000">;</font>
     <b><font color="#0000FF">using</font></b> cppad_swig<font color="#990000">::</font>sparse_rc<font color="#990000">;</font>
     <b><font color="#0000FF">using</font></b> cppad_swig<font color="#990000">::</font>sparse_rcv<font color="#990000">;</font>
     <b><font color="#0000FF">using</font></b> cppad_swig<font color="#990000">::</font>sparse_jac_work<font color="#990000">;</font>
     <b><font color="#0000FF">using</font></b> cppad_swig<font color="#990000">::</font>sparse_hes_work<font color="#990000">;</font>
     <b><font color="#0000FF">using</font></b> std<font color="#990000">::</font>string<font color="#990000">;</font>
     <i><font color="#9A1900">//</font></i>
     <i><font color="#9A1900">// initialize return variable</font></i>
     <font color="#009900">bool</font> ok <font color="#990000">=</font> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>
     <i><font color="#9A1900">//------------------------------------------------------------------------</font></i>
     <i><font color="#9A1900">// number of dependent and independent variables</font></i>
     <font color="#009900">int</font> n_dep <font color="#990000">=</font> <font color="#993399">1</font><font color="#990000">;</font>
     <font color="#009900">int</font> n_ind <font color="#990000">=</font> <font color="#993399">3</font><font color="#990000">;</font>
     <i><font color="#9A1900">//</font></i>
     <i><font color="#9A1900">// create the independent variables ax</font></i>
     <font color="#008080">vec_double</font> x <font color="#990000">=</font> cppad_swig<font color="#990000">::</font><b><font color="#000000">vec_double</font></b><font color="#990000">(</font>n_ind<font color="#990000">);</font>
     <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#009900">int</font> i <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> i <font color="#990000">&lt;</font> n_ind <font color="#990000">;</font> i<font color="#990000">++)</font> <font color="#FF0000">{</font>
          x<font color="#990000">[</font>i<font color="#990000">]</font> <font color="#990000">=</font> i <font color="#990000">+</font> <font color="#993399">2.0</font><font color="#990000">;</font>
     <font color="#FF0000">}</font>
     <font color="#008080">vec_a_double</font> ax <font color="#990000">=</font> cppad_swig<font color="#990000">::</font><b><font color="#000000">independent</font></b><font color="#990000">(</font>x<font color="#990000">);</font>
     <i><font color="#9A1900">//</font></i>
     <i><font color="#9A1900">// create dependent variables ay with ay0 = ax_0 * ax_1 * ax_2</font></i>
     <font color="#008080">a_double</font> ax_0 <font color="#990000">=</font> ax<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">];</font>
     <font color="#008080">a_double</font> ax_1 <font color="#990000">=</font> ax<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">];</font>
     <font color="#008080">a_double</font> ax_2 <font color="#990000">=</font> ax<font color="#990000">[</font><font color="#993399">2</font><font color="#990000">];</font>
     <font color="#008080">vec_a_double</font> ay <font color="#990000">=</font> cppad_swig<font color="#990000">::</font><b><font color="#000000">vec_a_double</font></b><font color="#990000">(</font>n_dep<font color="#990000">);</font>
     ay<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">=</font> ax_0 <font color="#990000">*</font> ax_1 <font color="#990000">*</font> ax_2<font color="#990000">;</font>
     <i><font color="#9A1900">//</font></i>
     <i><font color="#9A1900">// define af corresponding to f(x) = x_0 * x_1 * x_2</font></i>
     <font color="#008080">a_fun</font> af <font color="#990000">=</font> cppad_swig<font color="#990000">::</font><b><font color="#000000">a_fun</font></b><font color="#990000">(</font>ax<font color="#990000">,</font> ay<font color="#990000">);</font>
     <i><font color="#9A1900">//</font></i>
     <i><font color="#9A1900">// g(x) = w_0 * f_0 (x) = f(x)</font></i>
     <font color="#008080">vec_double</font> w <font color="#990000">=</font> cppad_swig<font color="#990000">::</font><b><font color="#000000">vec_double</font></b><font color="#990000">(</font>n_dep<font color="#990000">);</font>
     w<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">=</font> <font color="#993399">1.0</font><font color="#990000">;</font>
     <i><font color="#9A1900">//</font></i>
     <i><font color="#9A1900">// compute Hessian</font></i>
     <font color="#008080">vec_double</font> fpp <font color="#990000">=</font> af<font color="#990000">.</font><b><font color="#000000">hessian</font></b><font color="#990000">(</font>x<font color="#990000">,</font> w<font color="#990000">);</font>
     <i><font color="#9A1900">//</font></i>
     <i><font color="#9A1900">//          [ 0.0 , x_2 , x_1 ]</font></i>
     <i><font color="#9A1900">// f''(x) = [ x_2 , 0.0 , x_0 ]</font></i>
     <i><font color="#9A1900">//          [ x_1 , x_0 , 0.0 ]</font></i>
     ok <font color="#990000">=</font> ok <font color="#990000">&amp;&amp;</font> fpp<font color="#990000">[</font><font color="#993399">0</font> <font color="#990000">*</font> n_ind <font color="#990000">+</font> <font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">==</font> <font color="#993399">0.0</font> <font color="#990000">;</font>
     ok <font color="#990000">=</font> ok <font color="#990000">&amp;&amp;</font> fpp<font color="#990000">[</font><font color="#993399">0</font> <font color="#990000">*</font> n_ind <font color="#990000">+</font> <font color="#993399">1</font><font color="#990000">]</font> <font color="#990000">==</font> x<font color="#990000">[</font><font color="#993399">2</font><font color="#990000">]</font> <font color="#990000">;</font>
     ok <font color="#990000">=</font> ok <font color="#990000">&amp;&amp;</font> fpp<font color="#990000">[</font><font color="#993399">0</font> <font color="#990000">*</font> n_ind <font color="#990000">+</font> <font color="#993399">2</font><font color="#990000">]</font> <font color="#990000">==</font> x<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">]</font> <font color="#990000">;</font>
     <i><font color="#9A1900">//</font></i>
     ok <font color="#990000">=</font> ok <font color="#990000">&amp;&amp;</font> fpp<font color="#990000">[</font><font color="#993399">1</font> <font color="#990000">*</font> n_ind <font color="#990000">+</font> <font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">==</font> x<font color="#990000">[</font><font color="#993399">2</font><font color="#990000">]</font> <font color="#990000">;</font>
     ok <font color="#990000">=</font> ok <font color="#990000">&amp;&amp;</font> fpp<font color="#990000">[</font><font color="#993399">1</font> <font color="#990000">*</font> n_ind <font color="#990000">+</font> <font color="#993399">1</font><font color="#990000">]</font> <font color="#990000">==</font> <font color="#993399">0.0</font> <font color="#990000">;</font>
     ok <font color="#990000">=</font> ok <font color="#990000">&amp;&amp;</font> fpp<font color="#990000">[</font><font color="#993399">1</font> <font color="#990000">*</font> n_ind <font color="#990000">+</font> <font color="#993399">2</font><font color="#990000">]</font> <font color="#990000">==</font> x<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">;</font>
     <i><font color="#9A1900">//</font></i>
     ok <font color="#990000">=</font> ok <font color="#990000">&amp;&amp;</font> fpp<font color="#990000">[</font><font color="#993399">2</font> <font color="#990000">*</font> n_ind <font color="#990000">+</font> <font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">==</font> x<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">]</font> <font color="#990000">;</font>
     ok <font color="#990000">=</font> ok <font color="#990000">&amp;&amp;</font> fpp<font color="#990000">[</font><font color="#993399">2</font> <font color="#990000">*</font> n_ind <font color="#990000">+</font> <font color="#993399">1</font><font color="#990000">]</font> <font color="#990000">==</font> x<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">;</font>
     ok <font color="#990000">=</font> ok <font color="#990000">&amp;&amp;</font> fpp<font color="#990000">[</font><font color="#993399">2</font> <font color="#990000">*</font> n_ind <font color="#990000">+</font> <font color="#993399">2</font><font color="#990000">]</font> <font color="#990000">==</font> <font color="#993399">0.0</font> <font color="#990000">;</font>
     <i><font color="#9A1900">//</font></i>
     <b><font color="#0000FF">return</font></b><font color="#990000">(</font> ok <font color="#990000">);</font>
<font color="#FF0000">}</font></tt></pre>

<hr>Input File: build/lib/example/cplusplus/a_fun_hessian_xam.cpp

</body>
</html>
