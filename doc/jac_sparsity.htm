<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=default'
>
</script>
<head>
<title>Jacobian Sparsity Patterns</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="Jacobian Sparsity Patterns">
<meta name="keywords" id="keywords" content=" jacobian sparsity patterns syntax purpose for_jac_sparsity rev_jac_sparsity x af pattern_in pattern_out entire example ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_jac_sparsity_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="https://github.com/bradbell/cppad_swig" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td><a href="sparse_rcv_xam.py.htm" target="_top">Prev</a>
</td><td><a href="sparse_jac_pattern_xam.cpp.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>cppad_swig</option>
<option>library</option>
<option>sparse</option>
<option>jac_sparsity</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>cppad_swig-&gt;</option>
<option>testing</option>
<option>swig_xam.i</option>
<option>library</option>
<option>whats_new_2018</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>library-&gt;</option>
<option>module</option>
<option>a_double</option>
<option>vector</option>
<option>a_fun</option>
<option>sparse</option>
<option>error</option>
<option>xam.m4</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>sparse-&gt;</option>
<option>sparse_rc</option>
<option>sparse_rcv</option>
<option>jac_sparsity</option>
<option>hes_sparsity</option>
<option>sparse_jac</option>
<option>sparse_hes</option>
</select>
</td>
<td>
<select onchange='choose_down0(this)'>
<option>jac_sparsity-&gt;</option>
<option>sparse_jac_pattern_xam.cpp</option>
<option>sparse_jac_pattern_xam.m</option>
<option>sparse_jac_pattern_xam.pm</option>
<option>sparse_jac_pattern_xam.py</option>
</select>
</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Syntax</option>
<option>Purpose</option>
<option>---..for_jac_sparsity</option>
<option>---..rev_jac_sparsity</option>
<option>x</option>
<option>af</option>
<option>pattern_in</option>
<option>pattern_out</option>
<option>Sparsity for Entire Jacobian</option>
<option>Example</option>
</select>
</td>
</tr></table><br>
@(@\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\R}[1]{ {\rm #1} }@)@


<center><b><big><big>Jacobian Sparsity Patterns</big></big></b></center>
<br>
<b><big><a name="Syntax" id="Syntax">Syntax</a></big></b>

<br>

<code><i><font color="black"><span style='white-space: nowrap'>af</span></font></i><font color="blue"><span style='white-space: nowrap'>.for_jac_sparsity(</span></font><i><font color="black"><span style='white-space: nowrap'>pattern_in</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>pattern_out</span></font></i><font color="blue"><span style='white-space: nowrap'>)<br>
</span></font></code>

<code><i><font color="black"><span style='white-space: nowrap'>af</span></font></i><font color="blue"><span style='white-space: nowrap'>.rev_jac_sparsity(</span></font><i><font color="black"><span style='white-space: nowrap'>pattern_in</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>pattern_out</span></font></i><font color="blue"><span style='white-space: nowrap'>)</span></font></code>


<br>
<br>
<b><big><a name="Purpose" id="Purpose">Purpose</a></big></b>
<br>
We use <small>@(@
F : \B{R}^n \rightarrow \B{R}^m
@)@</small> to denote the
function corresponding to the operation sequence stored in 
<code><i><font color="black"><span style='white-space: nowrap'>af</span></font></i></code>
.

<br>
<br>
<big><a name="Purpose.for_jac_sparsity" id="Purpose.for_jac_sparsity">for_jac_sparsity</a></big>
<br>
Fix <small>@(@
R \in \B{R}^{n \times \ell}
@)@</small> and define the function
<small>@[@

	J(x) = F^{(1)} ( x ) * R

@]@</small>
Given a sparsity pattern for <small>@(@
R
@)@</small>,
<code><font color="blue">for_jac_sparsity</font></code> computes a sparsity pattern for <small>@(@
J(x)
@)@</small>.

<br>
<br>
<big><a name="Purpose.rev_jac_sparsity" id="Purpose.rev_jac_sparsity">rev_jac_sparsity</a></big>
<br>
Fix <small>@(@
R \in \B{R}^{\ell \times m}
@)@</small> and define the function
<small>@[@

	J(x) = R * F^{(1)} ( x )

@]@</small>
Given a sparsity pattern for <small>@(@
R
@)@</small>,
<code><font color="blue">rev_jac_sparsity</font></code> computes a sparsity pattern for <small>@(@
J(x)
@)@</small>.

<br>
<br>
<b><big><a name="x" id="x">x</a></big></b>
<br>
Note that a sparsity pattern for <small>@(@
J(x)
@)@</small> corresponds to the
operation sequence stored in 
<code><i><font color="black"><span style='white-space: nowrap'>af</span></font></i></code>
 and does not depend on
the argument 
<code><i><font color="black"><span style='white-space: nowrap'>x</span></font></i></code>
.

<br>
<br>
<b><big><a name="af" id="af">af</a></big></b>
<br>
The object 
<code><i><font color="black"><span style='white-space: nowrap'>af</span></font></i></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a_fun&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>af</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
The object 
<code><i><font color="black"><span style='white-space: nowrap'>af</span></font></i></code>
 is not <code><font color="blue">const</font></code> when using
<code><font color="blue">for_jac_sparsity</font></code>.
After a call to <code><font color="blue">for_jac_sparsity</font></code>, a sparsity pattern
for each of the variables in the operation sequence
is held in 
<code><i><font color="black"><span style='white-space: nowrap'>af</span></font></i></code>
 for possible later use during
reverse Hessian sparsity calculations.

<br>
<br>
<b><big><a name="pattern_in" id="pattern_in">pattern_in</a></big></b>
<br>
The argument 
<code><i><font color="black"><span style='white-space: nowrap'>pattern_in</span></font></i></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;sparse_rc&amp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>pattern_in</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
see <a href="sparse_rc.htm" target="_top"><span style='white-space: nowrap'>sparse_rc</span></a>
.
This is a sparsity pattern for <small>@(@
R
@)@</small>.

<br>
<br>
<b><big><a name="pattern_out" id="pattern_out">pattern_out</a></big></b>
<br>
This argument has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sparse_rc&lt;</span></font><i><font color="black"><span style='white-space: nowrap'>SizeVector</span></font></i><font color="blue"><span style='white-space: nowrap'>&gt;&amp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>pattern_out</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
This input value of 
<code><i><font color="black"><span style='white-space: nowrap'>pattern_out</span></font></i></code>
 does not matter.
Upon return 
<code><i><font color="black"><span style='white-space: nowrap'>pattern_out</span></font></i></code>
 is a sparsity pattern for
<small>@(@
J(x)
@)@</small>.

<br>
<br>
<b><big><a name="Sparsity for Entire Jacobian" id="Sparsity for Entire Jacobian">Sparsity for Entire Jacobian</a></big></b>
<br>
Suppose that <small>@(@
R
@)@</small> is the identity matrix.
In this case, 
<code><i><font color="black"><span style='white-space: nowrap'>pattern_out</span></font></i></code>
 is a sparsity pattern for
<small>@(@
F^{(1)} ( x )
@)@</small>.


<br>
<br>
<b><big><a name="Example" id="Example">Example</a></big></b>

<br>
<a href="sparse_jac_pattern_xam.cpp.htm" target="_top"><span style='white-space: nowrap'>C++</span></a>
,
<a href="sparse_jac_pattern_xam.m.htm" target="_top"><span style='white-space: nowrap'>Octave</span></a>
,
<a href="sparse_jac_pattern_xam.pm.htm" target="_top"><span style='white-space: nowrap'>Perl</span></a>
,
<a href="sparse_jac_pattern_xam.py.htm" target="_top"><span style='white-space: nowrap'>Python</span></a>
.


<hr>Input File: lib/sparse.cpp

</body>
</html>
